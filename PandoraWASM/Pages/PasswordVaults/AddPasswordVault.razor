@using Microsoft.AspNetCore.Components.Authorization
@using Pandora.Shared.DTOs.CategoryDTOs
@using Pandora.Shared.DTOs.PasswordVaultDTOs
@using PandoraWASM.Services.Interfaces

@inject IPasswordVaultService PasswordVaultService
@inject ICategoryService CategoryService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider LoginAuthenticationStateProvider

<MudCard>
    <MudForm Model="@model" @ref="@form">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudTextField @bind-Value="model.SiteName"
                                  Variant="Variant.Outlined"
                                  For="@(() => model.SiteName)"
                                  RequiredError=""
                                  Required
                                  Immediate="true"
                                  Label="Site Name / URL" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="model.UsernameOrEmail"
                                  For="@(() => model.UsernameOrEmail)"
                                  Variant="Variant.Outlined"
                                  Immediate="true"
                                  Required
                                  Label="Username or email" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="model.Password"
                                  Variant="Variant.Outlined"
                                  Immediate="true"
                                  Label="Password"
                                  InputType="@passwordInput"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@passwordInputIcon"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Required="true"
                                  RequiredError="Password required."
                                  Error="@passwordHasError"
                                  ErrorText="@passwordErrorText"
                                  OnBlur="(e) => OnPasswordChanged(model.Password)" />
                    <!-- Şifre Güç Durumuna Göre Doluluk Oranını Gösteren Progress Bar -->
                    <MudProgressLinear Class="mt-2" Color="Color.Primary" Value="@passwordStrength" />
                    @* <MudText Typo="Typo.caption" Align="Align.Left" Class="mt-1">Şifre Gücü: @passwordStrength%</MudText> *@
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudSelect Required
                               Variant="Variant.Outlined"
                               T="Guid"
                               Label="Select Category"
                               @bind-Value="model.CategoryId"
                               ToStringFunc="@(id => GetCategoryTitle(id))">
                        <MudSelectItem T="Guid" Value="Guid.Empty" Disabled>Select a category</MudSelectItem>
                        @foreach (var categoryDto in categoryDtos)
                        {
                            <MudSelectItem T="Guid" Value="@(categoryDto.Id)">@categoryDto.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField @bind-Value="model.Notes"
                                  For="@(() => model.Notes)"
                                  Variant="Variant.Outlined"
                                  Immediate="true"
                                  T="string"
                                  Lines="4"
                                  Label="Notes" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(()=> Submit())">
            Kaydet
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public PasswordVaultDto PasswordVaultDto { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudForm form;

    private PasswordVaultAddDto model = new();
    private IList<CategoryDto> categoryDtos = new List<CategoryDto>();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var cts = new CancellationTokenSource();
            categoryDtos = await CategoryService.GetCategories(cts.Token) ?? new List<CategoryDto>();
            await GetCurrentUserAsync();
        }
        catch (Exception)
        {
            throw;
        }
    }

    private bool passwordVisibility = false;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool passwordHasError = false;
    private string passwordErrorText = "";
    private int passwordStrength = 0;
    private Guid userId;
    private void TogglePasswordVisibility()
    {
        passwordVisibility = !passwordVisibility;
        passwordInput = passwordVisibility ? InputType.Text : InputType.Password;
        passwordInputIcon = passwordVisibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private async Task GetCurrentUserAsync()
    {
        var authState = await LoginAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("nameid")?.Value; // Use "nameid" as the claim type

            if (!string.IsNullOrEmpty(userIdClaim))
            {
                Console.WriteLine("User ID: " + userIdClaim);
                userId = Guid.Parse(userIdClaim);
            }
        }
    }

    private void ValidatePassword(string password)
    {
        passwordHasError = string.IsNullOrWhiteSpace(password);

        if (passwordHasError)
        {
            passwordErrorText = "Şifre gerekli.";
            passwordStrength = 0;
            return;
        }

        int strength = 0;

        if (password.Length >= 8) strength += 25;
        if (HasUpper(password)) strength += 25;
        if (HasLower(password)) strength += 25;
        if (HasSpecialCharacter(password)) strength += 25;

        passwordStrength = strength;

        passwordErrorText = strength == 100 ? "" : "Şifre en az 8 karakter, 1 büyük harf, 1 küçük harf ve özel karakter içermelidir.";
    }

    private bool HasUpper(string input) => input.Any(char.IsUpper);
    private bool HasLower(string input) => input.Any(char.IsLower);
    private bool HasSpecialCharacter(string input) => input.Any(ch => !char.IsLetterOrDigit(ch));

    private void OnPasswordChanged(string password)
    {
        ValidatePassword(password);
    }

    private async Task Submit()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please fill in the required fields on the form.", MudBlazor.Severity.Error);
            return;
        }
        if (userId == Guid.Empty)
        {
            Snackbar.Add("User could not be found. Please try again later", MudBlazor.Severity.Error);
            return;
        }
        model.UserId = userId;
        model.PasswordRepeat = model.Password;
        model.PasswordExpirationDate = DateTime.UtcNow.AddYears(1);
        var response = await PasswordVaultService.AddAsync(model, default);
        if (!response.Success)
        {
            Snackbar.Add($"{response.ErrorMessage}", Severity.Error);
            MudDialog.Close(DialogResult.Cancel());
        }
        else
        {
            Snackbar.Add("The password vault has been added successfully.", Severity.Success);
            MudDialog.Close(DialogResult.Ok("The password vault has been created successfully."));
        }
    }

    private string GetCategoryTitle(Guid? id)
    {
        if (id == Guid.Empty) return "Not selected";
        return categoryDtos.FirstOrDefault(c => c.Id == id)?.Name ?? "Not selected";
    }
}
