@using Microsoft.AspNetCore.Components.Authorization
@using Pandora.Shared.DTOs.PasswordVaultDTOs
@using Pandora.Shared.DTOs.UserDTOs
@using PandoraWASM.Services;
@using PandoraWASM.Services.Implementations
@using PandoraWASM.Services.Interfaces

@inject IPasswordVaultService PasswordVaultService
@inject IUserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider LoginAuthenticationStateProvider

@page "/password-vaults"

<style>
    .premium-card {
        position: relative;
        transition: transform 0.2s, box-shadow 0.2s;
        padding-bottom: 50px; /* Yeterli alan bırak */
    }

        .premium-card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        }

    .card-actions-right {
        position: absolute;
        right: 16px;
        bottom: 16px;
    }
</style>

@if (passwordVaultDtos == null)
{
    <p><em>Lütfen bekleyiniz</em></p>
}
else
{
    <MudGrid>
        @foreach (var passwordVault in passwordVaultDtos)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="premium-card" Style="@($"border: 1px solid {Colors.Orange.Darken1}; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);")">
                    <MudCardHeader Class="mud-theme-dark" Style="@($"background-color:{Colors.Orange.Lighten5}; color:{Colors.Shades.Black};")">
                        <MudText Typo="Typo.h6" Class="mud-theme-dark">@passwordVault.SecureSiteName</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Notes: @passwordVault.SecureNotes</MudText>
                        <MudText Typo="Typo.body2">Password Expiration Date: @passwordVault?.PasswordExpirationDate.Value.ToShortDateString()</MudText>
                    </MudCardContent>
                    <MudCardActions Class="card-actions-right">
                        <MudButton Class="mr-2" Variant="Variant.Filled" Color="Color.Primary">View</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="()=>OnEditClick(passwordVault)">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private IList<PasswordVaultDto> passwordVaultDtos = new List<PasswordVaultDto>();
    protected async override Task OnInitializedAsync()
    {
        await GetPasswordVaultsAsync();
    }

    private async Task GetPasswordVaultsAsync()
    {
        var cts = new CancellationTokenSource();
        try
        {
            passwordVaultDtos = await PasswordVaultService.GetPasswordVaultsAsync(cts.Token);
        }
        catch (Exception)
        {
            Snackbar.Add("An error has occured in server. Please try again.", Severity.Error);
        }
    }

    //Edit-Update
    private async Task OnEditClick(PasswordVaultDto passwordVaultDto)
    {
        DialogParameters<EditPasswordVault> parameters = new DialogParameters<EditPasswordVault>
        {
            {x=>x.PasswordVaultDto, passwordVaultDto}
        };
        DialogOptions options = new() { FullWidth = true, CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<EditPasswordVault>("Edit Password Vault", parameters, options);
        var result = await dialog.Result;
        var isCancelled = result.Canceled;
        if (!result.Canceled)
        {
            await GetPasswordVaultsAsync();
            StateHasChanged();
        }
    }
}
