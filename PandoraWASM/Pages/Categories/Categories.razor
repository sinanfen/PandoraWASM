@page "/categories"
@using Pandora.Shared.DTOs.CategoryDTOs
@using PandoraWASM.Services.Interfaces

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Categories</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudStack Justify="Justify.Center" Class="my-4">
        <MudText Typo="Typo.h4">All Categories</MudText>
    </MudStack>

    <MudItem md="12">
        <MudCard Elevation="3" Class="border-solid border-2 mud-border-warning">
            <MudCardContent>
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.End">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Dark"
                               OnClick="AddNewCategory">Create New Category</MudButton>
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>

    @if (categoryDtos == null)
    {
        <MudProgressLinear Color="MudBlazor.Color.Info" Indeterminate="true" Class="my-7" />
    }
    else
    {
        <MudGrid Class="mt-2" Spacing="3">
            @foreach (var category in categoryDtos)
            {
                <MudItem xs="6" sm="4" md="3">
                    <MudCard Elevation="2">
                        <MudCardContent>
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Rounded.Category" Size="Size.Large" />
                                <MudText Typo="Typo.h6">@category.Name</MudText>
                                <MudText Typo="Typo.caption">@category.Description</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Medium"
                                               OnClick="@(() => OnEditCategoryClick(category))" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private IList<CategoryDto> categoryDtos = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        await GetCategoriesAsync();
    }

    private async Task GetCategoriesAsync()
    {
        try
        {
            var cts = new CancellationTokenSource();
            categoryDtos = await CategoryService.GetCategories(cts.Token);
        }
        catch (Exception)
        {
            Snackbar.Add("An unexpected error has occured.", Severity.Error);
        }
    }

    private void NavigateToCategory(Guid categoryId)
    {
        NavigationManager.NavigateTo($"/categories/{categoryId}");
    }

    private async Task AddNewCategory()
    {
        DialogOptions options = new() { FullWidth = true, CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<AddCategory>("Add New Category", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetCategoriesAsync();
            StateHasChanged();
        }
    }

    //Edit-Update
    private async Task OnEditCategoryClick(CategoryDto categoryDto)
    {
        DialogParameters<EditCategory> parameters = new DialogParameters<EditCategory>
        {
            {x=>x.CategoryDto, categoryDto}
        };
        DialogOptions options = new() { FullWidth = true, CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<EditCategory>("Edit Category", parameters, options);
        var result = await dialog.Result;
        var isCancelled = result.Canceled;
        if (!result.Canceled)
        {
            await GetCategoriesAsync();
            StateHasChanged();
        }
    }
}
