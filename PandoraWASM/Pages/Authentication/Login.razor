@page "/auth/login"

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Pandora.Shared.DTOs.UserDTOs
@using PandoraWASM.Services
@using PandoraWASM.Services.Interfaces
@using PandoraWASM.Shared
@using System.Text.RegularExpressions

@layout LoginLayout
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider LoginAuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService

<div class="d-flex justify-center">
    <MudImage Fluid ObjectFit="ObjectFit.Cover" Src="/img/pandora.jpg" Alt="PANDORA" Class="rounded-lg" />
</div>
<MudText Align="Align.Center" Class="mt-2 mb-2" Typo="Typo.h4" GutterBottom="true">
    Sign In
</MudText>

@if (loginFailed)
{
    <MudAlert Severity="Severity.Error" Class="mt-8 mud-width-full" Style="max-width:500px;">
        Incorrect username or password
    </MudAlert>
}

<MudTextField T="string" @bind-Value="@userLoginDto.UsernameOrEmail" Label="Username Or Email" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@userLoginDto.Password"
              Label="Password"
              Variant="Variant.Outlined"
              InputType="@PasswordInput"
              Adornment="Adornment.End"
              AdornmentIcon="@PasswordInputIcon"
              OnAdornmentClick="TogglePasswordVisibility" />

<div class="d-flex justify-space-between align-center mt-4">
    <MudText Typo="Typo.body2">Hesabınız yok mu?</MudText>
    <MudLink Href="/pages/authentication/register" Class="ml-2" Style="font-weight:bold;">
        Kayıt Ol
    </MudLink>
</div>


<MudButton Variant="Variant.Filled" Style="@($"background:{Colors.Amber.Darken3};  font-weight:bold;")" ButtonType="ButtonType.Submit" Size="Size.Large" FullWidth="true" OnClick="HandleLogin">
    LOGIN
</MudButton>

@code {
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private UserLoginDto userLoginDto = new UserLoginDto();
    private bool loginFailed = false;

    private async Task HandleLogin()
    {
        var cts = new CancellationTokenSource(10_000);
        var (success, message) = await AuthService.LoginAsync(userLoginDto, cts.Token);

        if (success)
        {
            var token = await AuthService.GetTokenAsync();
            await LoginAuthenticationStateProvider.NotifyUserAuthentication(token);
            loginFailed = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/home/dashboard", forceLoad: false);
        }
        else
        {
            loginFailed = true;
            Snackbar.Add(message, Severity.Error);
        }
    }

    private bool IsValidEmail(string input)
    {
        var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        return Regex.IsMatch(input, emailPattern);
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    void RedirectToHome()
    {
        NavigationManager.NavigateTo("/home/dashboard");
    }
}
