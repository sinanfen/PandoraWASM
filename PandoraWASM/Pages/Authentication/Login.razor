@page "/auth/login"

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Pandora.Shared.DTOs.UserDTOs
@using PandoraWASM.Services
@using PandoraWASM.Services.Interfaces
@using PandoraWASM.Shared

@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider LoginAuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@layout LoginLayout

<MudPaper Elevation="5" Width="550px" Class="pa-6" Style="border-radius: 12px;">
    <!-- Login and Register Links -->
    <div class="d-flex justify-center">
        <MudImage Fluid ObjectFit="ObjectFit.Cover" Src="/img/pandora.jpg" Alt="PANDORA" Class="rounded-lg" />
    </div>
    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mt-4 mb-4">
        <!-- LOG IN Text -->
        <MudText Typo="Typo.h3" Style="font-family:'Cinzel Decorative', serif; font-weight:400; color: #3A2F2F; letter-spacing: 1px; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);" GutterBottom>
            LOGIN
        </MudText>

        <!-- OR CREATE AN ACCOUNT Link -->
        <MudLink Href="/pages/authentication/register" Style="font-family:'Cormorant Garamond', serif; font-weight:bold; color: #8B5D33; text-decoration:none; letter-spacing: 1.1px;" Underline="Underline.Hover">
            OR CREATE AN ACCOUNT
        </MudLink>
    </MudStack>

    <!-- Error Alert -->
    @if (loginFailed)
    {
        <MudAlert Severity="Severity.Error" Dense="true" Class="mb-4">
            <MudText Style="font-family:'Cormorant Garamond', serif; font-weight:500; color: #8B5D33; text-decoration:none; letter-spacing: 1.1px;">
                Incorrect username or password
            </MudText>
        </MudAlert>
    }

    <!-- Email Address Field -->
    <MudTextField T="string"
                  @bind-Value="@userLoginDto.UsernameOrEmail"
                  Label="Email address"
                  Variant="Variant.Outlined"
                  FullWidth="true"
                  Required="true" />

    <!-- Password Field -->
    <MudTextField @bind-Value="@userLoginDto.Password"
                  Label="Master Password"
                  Variant="Variant.Outlined"
                  InputType="@PasswordInput"
                  Adornment="Adornment.End"
                  AdornmentIcon="@PasswordInputIcon"
                  OnAdornmentClick="TogglePasswordVisibility"
                  FullWidth="true"
                  Required="true"
                  Class="mt-4" />

    <!-- Login Button -->
    <MudButton Variant="Variant.Filled"
               Color="Color.Warning"
               FullWidth="true"
               Class="mt-6"
               Style="height: 48px; border-radius: 24px; box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.2); font-weight: bold;"
               OnClick="HandleLogin">
        <MudText Typo="Typo.h4"
                 Style="font-family:'Times New Roman', serif; font-size: 1.3rem; font-weight: bold; color: #3A2F2F; letter-spacing: 0.5px; text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.25);">
            LOGIN
        </MudText>
    </MudButton>

    <!-- Forgot Password Link -->
    <MudLink Href="#" Class="d-block text-center mt-4" Style="font-family:'Cormorant Garamond', serif; font-weight:bold; color: #8B5D33; text-decoration:none; letter-spacing: 1.1px;" Color="Color.Primary" Underline="Underline.Hover">
        FORGOT PASSWORD?
    </MudLink>
</MudPaper>

@code {
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        PasswordVisibility = !PasswordVisibility;
        PasswordInput = PasswordVisibility ? InputType.Text : InputType.Password;
        PasswordInputIcon = PasswordVisibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private UserLoginDto userLoginDto = new UserLoginDto();
    private bool loginFailed = false;

    private async Task HandleLogin()
    {
        var cts = new CancellationTokenSource();
        var (success, message, token) = await AuthService.LoginAsync(userLoginDto, cts.Token);

        if (success && token != null)
        {
            await LoginAuthenticationStateProvider.NotifyUserAuthentication(token);
            loginFailed = false;
            NavigationManager.NavigateTo("/home/dashboard", forceLoad: true);
        }
        else
        {
            loginFailed = true;
            Snackbar.Add(message, Severity.Error);
        }
    }
}
