@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Pandora.Shared.DTOs.UserDTOs
@using PandoraWASM.CustomComponents
@using PandoraWASM.Services
@using System.Security.Claims
@using PandoraWASM.Services.Interfaces
@using PandoraWASM.Theme

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_themeManager.Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
@inject CustomAuthenticationStateProvider LoginAuthenticationStateProvider
@inject IAuthService AuthService
@inject IUserService UserService

@inherits LayoutComponentBase

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Elevation="_themeManager.AppBarElevation">
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudLink Href="/home/dashboard">
                        <MudImage ObjectFit="ObjectFit.Cover"
                                  Height="55" Src="@(_isDarkMode ? "/img/pandora-vector.png" : "/img/pandora-vector.png")"
                                  Alt="PANDORA" Class="rounded-lg ml-4" />
                    </MudLink>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudText Typo="Typo.subtitle2">PANDORA</MudText>
                </MudHidden>
                <MudSpacer />
                <MudMenu Icon="@Icons.Material.Rounded.Notifications" Color="Color.Inherit">
                    <ChildContent>
                        <MudMenuItem>
                            <MudIcon Icon="@Icons.Material.Outlined.NotificationsActive" />Duyuru 1
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudIcon Icon="@Icons.Material.Outlined.NotificationsNone" /> Duyuru 2
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
                <MudMenu Dense="true" Class="mt-1 ml-4">
                    <ActivatorContent>
                        <MudAvatar>
                            <MudImage Src="@(ImageUrl)"></MudImage>
                        </MudAvatar>
                        <MudText Class="mt-2 ml-2">@FirstName</MudText>
                    </ActivatorContent>
                    <ChildContent>
                        <MudPaper MinWidth="200px">
                            <PersonCard FirstName="@FirstName"
                                        LastName="@LastName"
                                        ImageUrl="@ImageUrl"
                                        JobTitle="@JobTitle"
                                        Class="mt-n2" />
                            <MudDivider Class="mb-2" />
                            <MudListItem T="string" Text="Profil" Icon="@Icons.Material.Outlined.Person" Href="/personal/account" />
                            <MudListItem T="string" Text="Çıkış Yap" Icon="@Icons.Material.Outlined.Login" OnClick="Logout" />
                        </MudPaper>
                    </ChildContent>
                </MudMenu>
                <MudSwitch ValueChanged="DarkModeToggle"
                           Value="_isDarkMode"
                           Color="@(_isDarkMode ? Color.Tertiary : Color.Primary)"
                           Class="ml-3"
                           T="bool"
                           Size="Size.Large"
                           ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"
                           ThumbIconColor="@(_isDarkMode ? Color.Info : Color.Warning)" />
                <!-- Theme Manager Icon Button -->
                <MudIconButton Icon="@Icons.Material.Filled.Settings"
                               Color="Color.Inherit"
                               OnClick="@((e) => OpenThemeManager(true))"
                               Class="ml-2" />

            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="_themeManager.DrawerElevation" ClipMode="_themeManager.DrawerClipMode">
                <NavMenu FirstName="@FirstName"
                         LastName="@LastName"
                         ImageUrl="@ImageUrl"
                         JobTitle="@JobTitle" />
            </MudDrawer>
            <MudMainContent>
                <MudHidden Breakpoint="Breakpoint.None">
                    <MudToolBar Gutters="false">
                        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                        <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
                        <MudSpacer />
                    </MudToolBar>
                </MudHidden>
                <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
                    @Body
                </MudContainer>
            </MudMainContent>
            @* <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" /> *@
            <MudThemeManager Open="_themeManagerOpen"
                             OpenChanged="OpenThemeManager"
                             Theme="_themeManager"
                             ColorPickerView="ColorPickerView.Palette"
                             ThemeChanged="UpdateTheme" />
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme
    {
        Theme = new PandoraAdminDashboard(),
        DrawerClipMode = DrawerClipMode.Always,
        DefaultBorderRadius = 5,
        AppBarElevation = 2,
        DrawerElevation = 5,
        DefaultElevation = 5
    };

    public bool _drawerOpen = true;
    public bool _themeManagerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme _theme = new();

    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string JobTitle { get; set; }
    public string ImageUrl { get; set; }

    private ClaimsPrincipal user;
    private Guid userId;
    private UserDto loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        var cts = new CancellationTokenSource();
        var authState = await LoginAuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst("nameid")?.Value; // Use "nameid" as the claim type

            if (!string.IsNullOrEmpty(userIdClaim))
            {
                Console.WriteLine("User ID: " + userIdClaim);
                userId = Guid.Parse(userIdClaim);
                loggedInUser = await UserService.GetAsync(userId, cts.Token);
            }
            else
                Console.WriteLine("User ID claim not found.");
        }
        else
            Console.WriteLine("User is not authenticated.");

        if (loggedInUser != null)
        {
            FirstName = loggedInUser.FirstName;
            LastName = loggedInUser.LastName;
            JobTitle = loggedInUser.Username;
            ImageUrl = "/img/pandora-myth.png";
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        await _localStorageService.SetItemAsync<bool>("isDarkMode", _isDarkMode, default);
    }

    private void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Dashboard", href: ""),
    };

    private async Task Logout()
    {
        await LoginAuthenticationStateProvider.NotifyUserLogout();
        _navigationManager.NavigateTo("/auth/login", true);
    }
}